(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{413:function(t,s,a){"use strict";a.r(s);var e=a(56),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"manipulating-data-using-orm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#manipulating-data-using-orm"}},[t._v("#")]),t._v(" Manipulating Data Using ORM")]),t._v(" "),a("p",[t._v("Until the previous chapter, we focused on utilizing queries from the "),a("code",[t._v("CORE")]),t._v(" perspective.")]),t._v(" "),a("p",[t._v("In this chapter, we explain the components, lifecycle, and interaction methods of the "),a("code",[t._v("Session")]),t._v(" used in the ORM approach.")]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"inserting-rows-with-orm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inserting-rows-with-orm"}},[t._v("#")]),t._v(" Inserting rows with ORM")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("Session")]),t._v(" object, when using ORM, creates Insert objects and emits them in transactions. "),a("code",[t._v("Session")]),t._v(" adds object entries to perform these processes. Then, through a process called "),a("code",[t._v("flush")]),t._v(", it records the new items in the database.")]),t._v(" "),a("h3",{attrs:{id:"instances-of-objects-representing-rows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instances-of-objects-representing-rows"}},[t._v("#")]),t._v(" Instances of Objects Representing Rows")]),t._v(" "),a("p",[t._v("In the previous process, we executed INSERT using a Python Dictionary.")]),t._v(" "),a("p",[t._v("In ORM, we directly use user-defined Python objects defined in the table metadata definition.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" squidward "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"squidward"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Squidward Tentacles"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" krabs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ehkrabs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Eugene H. Krabs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("We create two "),a("code",[t._v("User")]),t._v(" objects that represent potential database rows to be INSERTed. Because of "),a("code",[t._v("__init__()")]),t._v(" constructor automatically created by ORM mapping, we can create each object using the constructor's column names as keys.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" squidward\nUser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'squidward'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Squidward Tentacles'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Similar to Core's "),a("code",[t._v("Insert")]),t._v(", ORM integrates it even without including a primary key. The "),a("code",[t._v("None")]),t._v(" value for "),a("code",[t._v("id")]),t._v(" is provided by SQLAlchemy to indicate that the attribute does not have a value yet.")]),t._v(" "),a("p",[t._v("Currently, the two objects ("),a("code",[t._v("squiward")]),t._v(" and "),a("code",[t._v("krabs")]),t._v(") are in a state called "),a("code",[t._v("transient")]),t._v(". The "),a("code",[t._v("transient")]),t._v(" state means they are not yet connected to any database and not yet associated with a "),a("code",[t._v("Session")]),t._v(" object that can generate an "),a("code",[t._v("INSERT")]),t._v(" statement.")]),t._v(" "),a("h3",{attrs:{id:"adding-objects-to-the-session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding-objects-to-the-session"}},[t._v("#")]),t._v(" Adding Objects to the "),a("code",[t._v("Session")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("engine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# It is essential to close after use.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("squidward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Insert an object into session via Session.add() method.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("krabs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("When an object is added to the "),a("code",[t._v("Session")]),t._v(" through "),a("code",[t._v("Session.add()")]),t._v(", it is called being in the "),a("code",[t._v("pending")]),t._v(" state.\nThe pending state means the object has not yet been added to the database.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("new   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# You can check the objects in the pending state through session.new. Objects are added to the Session using the Session.add() method.")]),t._v("\nIdentitySet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'squidward'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Squidward Tentacles'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ehkrabs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Eugene H. Krabs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("IdentitySet")]),t._v(" is a Python set that hashes object IDs in all cases.")]),t._v(" "),a("li",[t._v("That is, it uses the "),a("code",[t._v("id()")]),t._v(" method, not the "),a("code",[t._v("hash()")]),t._v(" function of Python's built-in functions.\"")])]),t._v(" "),a("h3",{attrs:{id:"flushing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flushing"}},[t._v("#")]),t._v(" Flushing")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("Session")]),t._v(" object uses the "),a("a",{attrs:{href:"https://martinfowler.com/eaaCatalog/unitOfWork.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("unit of work pattern"),a("OutboundLink")],1),t._v(". This means that it accumulates changes but does not actually communicate with the database until necessary.\nThis behavior allows objects in the previously mentioned "),a("code",[t._v("pending")]),t._v(" state to be used more efficiently in SQL DML.\nThe process of actually sending the current changes to the Database via SQL is called flushing.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flush"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("\"\"\"\nINSERT INTO user_account (name, fullname) VALUES (?, ?)\n[...] ('squidward', 'Squidward Tentacles')\nINSERT INTO user_account (name, fullname) VALUES (?, ?)\n[...] ('ehkrabs', 'Eugene H. Krabs')\n\"\"\"")]),t._v("\n")])])]),a("p",[t._v("Now, the transaction remains open until one of "),a("code",[t._v("Session.commit()")]),t._v(", "),a("code",[t._v("Session.rollback()")]),t._v(", or "),a("code",[t._v("Session.close()")]),t._v(" is invoked.")]),t._v(" "),a("p",[t._v("While you can use "),a("code",[t._v("Session.flush()")]),t._v(" directly to push the current pending contents, "),a("code",[t._v("Session")]),t._v(" typically features "),a("code",[t._v("autoflush")]),t._v(", so this is usually not necessary. "),a("code",[t._v("Session.commit()")]),t._v(" flushes changes every time it is called.")]),t._v(" "),a("h3",{attrs:{id:"automatically-generated-primary-key-properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#automatically-generated-primary-key-properties"}},[t._v("#")]),t._v(" Automatically Generated Primary Key Properties")]),t._v(" "),a("p",[t._v("When a row is inserted, the Python object we created becomes "),a("code",[t._v("persistent")]),t._v(".\nThe "),a("code",[t._v("persistent")]),t._v(" state is associated with the loaded "),a("code",[t._v("Session")]),t._v(" object.")]),t._v(" "),a("p",[t._v("During "),a("code",[t._v("INSERT")]),t._v(", the ORM retrieves the primary key identifier for each new object.\nThis uses the same "),a("code",[t._v("CursorResult.inserted_primary_key")]),t._v(" accessor introduced earlier.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" squidward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" krabs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("When ORM is flushed, instead of "),a("code",[t._v("executemany")]),t._v(", two separate INSERT statements are used because of this "),a("code",[t._v("CursorResult.inserted_primary_key")]),t._v(".\nIn SQLite, for instance, you need to "),a("code",[t._v("INSERT")]),t._v(" one column at a time to use the auto-increment feature (other various databases like PostgreSQL's IDENTITY or SERIAL function similarly).\nIf a database connection like "),a("code",[t._v("psycopg2")]),t._v(", which can provide primary key information for many rows at once, is used, the ORM optimizes this to "),a("code",[t._v("INSERT")]),t._v(' many rows at once."')])]),t._v(" "),a("h3",{attrs:{id:"identity-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identity-map"}},[t._v("#")]),t._v(" Identity Map")]),t._v(" "),a("p",[a("code",[t._v("Identity Map")]),t._v(" ("),a("code",[t._v("ID Map")]),t._v(") is an in-memory storage that links all objects currently loaded in memory to their primary key IDs. You can retrieve one of these objects through "),a("code",[t._v("Session.get()")]),t._v(". This method searches for the object in the "),a("code",[t._v("ID Map")]),t._v(" if it's in memory, or through a "),a("code",[t._v("SELECT")]),t._v(" statement if it's not.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" some_squidward "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" some_squidward\nUser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'squidward'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Squidward Tentacles'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("An important point is that the "),a("code",[t._v("ID Map")]),t._v(" maintains unique objects among Python objects.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" some_squidward "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" squidward \n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])]),a("p",[t._v("The "),a("code",[t._v("ID Map")]),t._v(" is a crucial feature that allows manipulation of complex object sets within a transaction in an unsynchronized state.")]),t._v(" "),a("h3",{attrs:{id:"committing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#committing"}},[t._v("#")]),t._v(" Committing")]),t._v(" "),a("p",[t._v("We now "),a("code",[t._v("commit")]),t._v(" the current changes to the transaction.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nCOMMIT\n")])])]),a("br"),t._v(" "),a("h2",{attrs:{id:"how-to-update-orm-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-update-orm-objects"}},[t._v("#")]),t._v(" How to UPDATE ORM objects")]),t._v(" "),a("p",[t._v("There are two ways to perform an "),a("code",[t._v("UPDATE")]),t._v(" through ORM:")]),t._v(" "),a("ol",[a("li",[t._v("Using the "),a("code",[t._v("unit of work")]),t._v(" pattern employed by "),a("code",[t._v("Session")]),t._v(". "),a("code",[t._v("UPDATE")]),t._v(" operations for each primary key with changes are sent out in sequence.")]),t._v(" "),a("li",[t._v('Known as "ORM usage update", where you can explicitly use the '),a("code",[t._v("Update")]),t._v(' construct with Session."')])]),t._v(" "),a("h3",{attrs:{id:"updating-changes-automatically"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updating-changes-automatically"}},[t._v("#")]),t._v(" Updating changes automatically")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sandy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("select"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter_by"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sandy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scalar_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWHERE user_account.name = ?\n[...] (\'sandy\',)\n"""')]),t._v("\n")])])]),a("p",[t._v("This 'Sandy' user object acts as a "),a("em",[t._v("proxy")]),t._v(" for a row in the database, more specifically, for the row with primary key "),a("code",[t._v("2")]),t._v(" from the transaction's perspective.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sandy\nUser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sandy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sandy Cheeks'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sandy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sandy Squirrel"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# When an object's attribute is changed, the Session records this change.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sandy "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dirty              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Such changed objects are referred to as 'dirty' and can be checked in session.dirty.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])]),a("p",[t._v("When the "),a("code",[t._v("Session")]),t._v(" executes "),a("code",[t._v("flush")]),t._v(", an "),a("code",[t._v("UPDATE")]),t._v(" is executed in the database, actually updating the values in the database. If a "),a("code",[t._v("SELECT")]),t._v(" statement is executed afterwards, a "),a("code",[t._v("flush")]),t._v(" is automatically executed, allowing you to immediately retrieve the updated name value of Sandy through "),a("code",[t._v("SELECT")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sandy_fullname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("     select"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scalar_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nUPDATE user_account SET fullname=? WHERE user_account.id = ?\n[...] (\'Sandy Squirrel\', 2)\nSELECT user_account.fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (2,)\n"""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sandy_fullname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nSandy Squirrel\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Using the flush, Sandy's changes are actually reflected in the database,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# causing the object to lose its 'dirty' status.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sandy "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dirty \n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n")])])]),a("h3",{attrs:{id:"orm-usage-update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orm-usage-update"}},[t._v("#")]),t._v(" ORM usage update")]),t._v(" "),a("p",[t._v("The last method to perform an "),a("code",[t._v("UPDATE")]),t._v(" through ORM is to explicitly use 'ORM usage update'. This allows you to use a general SQL "),a("code",[t._v("UPDATE")]),t._v(" statement that can affect many rows at once.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("     update"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("     where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sandy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("     values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sandy Squirrel Extraordinaire"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nUPDATE user_account SET fullname=? WHERE user_account.name = ?\n[...] (\'Sandy Squirrel Extraordinaire\', \'sandy\')\n"""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sqlalchemy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("engine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cursor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CursorResult "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("If there are objects in the current "),a("code",[t._v("Session")]),t._v(" that match the given conditions, the corresponding "),a("code",[t._v("update")]),t._v(" will also be reflected in these objects.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sandy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullname\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sandy Squirrel Extraordinaire'")]),t._v("\n")])])]),a("br"),t._v(" "),a("h2",{attrs:{id:"how-to-delete-orm-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-delete-orm-objects"}},[t._v("#")]),t._v(" How to Delete ORM objects")]),t._v(" "),a("p",[t._v("You can mark individual ORM objects for deletion using the "),a("code",[t._v("Session.delete()")]),t._v(" method. Once "),a("code",[t._v("delete")]),t._v(" is executed, objects in that "),a("code",[t._v("Session")]),t._v(" become expired.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" patrick "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nSELECT user_account.id AS user_account_id, user_account.name AS user_account_name,\nuser_account.fullname AS user_account_fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (3,)\n"""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("patrick"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Indicate that patrick will be deleted")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("     select"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"patrick"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Execute flush at this point")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nSELECT address.id AS address_id, address.email_address AS address_email_address,\naddress.user_id AS address_user_id\nFROM address\nWHERE ? = address.user_id\n[...] (3,)\nDELETE FROM user_account WHERE user_account.id = ?\n[...] (3,)\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWHERE user_account.name = ?\n[...] (\'patrick\',)\n"""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" squidward "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" session "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Once expired in the Session, the object is removed from the session.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n")])])]),a("p",[t._v("Like the 'Sandy' used in the above "),a("code",[t._v("UPDATE")]),t._v(", these actions are only within the ongoing transaction and can be undone at any time unless "),a("em",[t._v("committed")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"orm-usage-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orm-usage-delete"}},[t._v("#")]),t._v(" ORM usage delete")]),t._v(" "),a("p",[t._v("Like "),a("code",[t._v("UPDATE")]),t._v(", there is also 'ORM usage delete'.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is just an example, not a necessary operation for delete.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" squidward "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nSELECT user_account.id AS user_account_id, user_account.name AS user_account_name,\nuser_account.fullname AS user_account_fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (4,)\n"""')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"squidward"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nDELETE FROM user_account WHERE user_account.name = ?\n[...] (\'squidward\',)\n<sqlalchemy.engine.cursor.CursorResult object at 0x...>\n"""')]),t._v("\n")])])]),a("br"),t._v(" "),a("h2",{attrs:{id:"rolling-back"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rolling-back"}},[t._v("#")]),t._v(" Rolling Back")]),t._v(" "),a("p",[a("code",[t._v("Session")]),t._v(" has a "),a("code",[t._v("Session.rollback()")]),t._v(" method to roll back the current operations. This method affects Python objects like the aforementioned "),a("code",[t._v("sandy")]),t._v(".\nCalling "),a("code",[t._v("Session.rollback()")]),t._v(" not only rolls back the transaction but also turns all objects associated with this "),a("code",[t._v("Session")]),t._v(" into "),a("code",[t._v("expired")]),t._v(" status. This state change triggers a self-refresh the next time the object is accessed, a process known as "),a("em",[t._v("lazy loading")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rollback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nROLLBACK\n")])])]),a("p",[t._v("Looking closely at "),a("code",[t._v("sandy")]),t._v(", which is in the "),a("code",[t._v("expired")]),t._v(" state, you can see that no other information remains except for special SQLAlchemy-related status objects.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sandy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__dict__\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'_sa_instance_state'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sqlalchemy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InstanceState "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),t._v(" at 0x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sandy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullname      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Since the session is expired, accessing the object properties will trigger a new transaction.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nSELECT user_account.id AS user_account_id, user_account.name AS user_account_name,\nuser_account.fullname AS user_account_fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (2,)\n"""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sandy Cheeks'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sandy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__dict__    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now you can see that the database row is also filled in the sandy object.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'_sa_instance_state'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("sqlalchemy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InstanceState "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),t._v(" at 0x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sandy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fullname'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sandy Cheeks'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("For the deleted objects, you can see that they are restored in the "),a("code",[t._v("Session")]),t._v(" and appear again in the database.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" patrick "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" session\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("select"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'patrick'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scalar_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" patrick\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWHERE user_account.name = ?\n[...] (\'patrick\',)\n"""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])]),a("br"),t._v(" "),a("h2",{attrs:{id:"closing-the-session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#closing-the-session"}},[t._v("#")]),t._v(" Closing the "),a("code",[t._v("Session")])]),t._v(" "),a("p",[t._v("We have handled the "),a("code",[t._v("Session")]),t._v(" outside of the context structure, and in such cases, it is good practice to "),a("em",[t._v("explicitly")]),t._v(" close the "),a("code",[t._v("Session")]),t._v(" as follows:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nROLLBACK\n")])])]),a("p",[t._v("Similarly, when a "),a("code",[t._v("Session")]),t._v(" created through a context statement is closed within the context statement, the following actions are performed.")]),t._v(" "),a("ul",[a("li",[t._v("Cancel all ongoing transactions (e.g., rollbacks) to release all connection resources to the connection pool.\n"),a("ul",[a("li",[t._v("This means you don't need to explicitly call "),a("code",[t._v("Session.rollback()")]),t._v(" to check if the transaction was rolled back when closing the "),a("code",[t._v("Session")]),t._v(" after performing some read-only operations with it. The connection pool handles this.")])])]),t._v(" "),a("li",[t._v("Remove all objects from the "),a("code",[t._v("Session")]),t._v(".\n"),a("ul",[a("li",[t._v("This means that all Python objects loaded for this Session, such as "),a("code",[t._v("sandy")]),t._v(", "),a("code",[t._v("patrick")]),t._v(", and "),a("code",[t._v("squidward")]),t._v(", are now in a "),a("code",[t._v("detached")]),t._v(" state. For instance, an object that was in the "),a("code",[t._v("expired")]),t._v(" state is no longer associated with a database transaction to refresh data due to a "),a("code",[t._v("Session.commit()")]),t._v(" call, and it does not contain the current row's state.")]),t._v(" "),a("li",[a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" squidward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\nTraceback "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("most recent call last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nsqlalchemy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DetachedInstanceError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("User at 0x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" bound to a Session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" attribute refresh operation cannot proceed\n")])])])]),t._v(" "),a("li",[t._v("Detached objects can be reassociated with the same or a new "),a("code",[t._v("Session")]),t._v(" using the "),a("code",[t._v("Session.add()")]),t._v(" method, re-establishing the relationship with a specific database row.")]),t._v(" "),a("li",[a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("squidward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Reconnect to the session")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" squidward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Retrieve the information through the transaction again.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nSELECT user_account.id AS user_account_id, user_account.name AS user_account_name, user_account.fullname AS user_account_fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (4,)\n"""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'squidward'")]),t._v("\n")])])])])])])]),t._v(" "),a("blockquote",[a("p",[t._v("Objects in the "),a("code",[t._v("detached")]),t._v(" state should ideally be avoided. When a "),a("code",[t._v("Session")]),t._v(" is closed, it cleans up references to all previously connected objects. Typically, the need for "),a("code",[t._v("detached")]),t._v(" objects arises in web applications when an object has just been committed and the "),a("code",[t._v("Session")]),t._v(" is closed before it is rendered in a view. In this case, set the "),a("code",[t._v("Session.expire_on_commit")]),t._v(" flag to "),a("code",[t._v("False")]),t._v(".")])])])}),[],!1,null,null,null);s.default=n.exports}}]);