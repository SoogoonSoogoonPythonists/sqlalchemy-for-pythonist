(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{424:function(s,t,a){"use strict";a.r(t);var n=a(56),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"orm-방식으로-데이터-조작하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orm-방식으로-데이터-조작하기"}},[s._v("#")]),s._v(" ORM 방식으로 데이터 조작하기")]),s._v(" "),a("p",[s._v("이전 챕터까지 CORE 관점에서 쿼리를 활용하는 방식에 초점을 맞췄습니다. 이번 챕터에서는 ORM 방식에서 쓰이는 "),a("code",[s._v("Session")]),s._v("의 구성 요소와 수명 주기, 상호 작용하는 방법을 설명합니다.")]),s._v(" "),a("br"),s._v(" "),a("h2",{attrs:{id:"orm으로-행-삽입하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orm으로-행-삽입하기"}},[s._v("#")]),s._v(" ORM으로 행 삽입하기")]),s._v(" "),a("p",[a("code",[s._v("Session")]),s._v(" 객체는 ORM을 사용할 때 "),a("code",[s._v("Insert")]),s._v(" 객체들을 만들고 트랜잭션에서 이 객체들을 내보내는 역할을 합니다.\n"),a("code",[s._v("Session")]),s._v("은 이러한 과정들을 수행하기 위해 객체 항목을 추가합니다.\n그 후 flush라는 프로세스를 통해 새로운 항목들을 데이터베이스에 기록합니다.")]),s._v(" "),a("h3",{attrs:{id:"행을-나타내는-객체의-인스턴스"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#행을-나타내는-객체의-인스턴스"}},[s._v("#")]),s._v(" 행을 나타내는 객체의 인스턴스")]),s._v(" "),a("p",[s._v("이전 과정에서 우리는 "),a("code",[s._v("Python Dict")]),s._v("를 사용하여 "),a("code",[s._v("INSERT")]),s._v("를 실행하였습니다.")]),s._v(" "),a("p",[s._v("ORM에서는 테이블 메타데이터 정의에서 정의한 사용자 정의 Python 객체를 직접 사용합니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" squidward "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"squidward"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Squidward Tentacles"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" krabs "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ehkrabs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Eugene H. Krabs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[a("code",[s._v("INSERT")]),s._v(" 될 잠재적인 데이터베이스 행을 나타내는 두 개의 "),a("code",[s._v("User")]),s._v(" 객체를 만듭니다.\nORM 매핑에 의해 자동으로 생성된 "),a("code",[s._v("__init__()")]),s._v(" 생성자 덕에 생성자의 열 이름을 키로 사용하여 각 객체를 생성할 수 있습니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" squidward\nUser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'squidward'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Squidward Tentacles'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("Core의 "),a("code",[s._v("Insert")]),s._v("와 유사하게, 기본 키를 포함하지 않아도 ORM이 이를 통합시켜 줍니다.\n"),a("code",[s._v("id")]),s._v("의 "),a("code",[s._v("None")]),s._v(" 값은 속성에 아직 값이 없음을 나타내기 위해 SQLAlchemy에서 제공합니다.")]),s._v(" "),a("p",[s._v("현재 위의 두 객체("),a("code",[s._v("squiward")]),s._v("와 "),a("code",[s._v("krabs")]),s._v(")는 "),a("code",[s._v("transient")]),s._v(" 상태라고 불리게 됩니다.\n"),a("code",[s._v("transient")]),s._v(" 상태란, 어떤 데이터베이스와 연결되지 않고, "),a("code",[s._v("INSERT")]),s._v("문을 생성할 수 있는 "),a("code",[s._v("Session")]),s._v("객체와도 아직 연결되지 않은 상태를 의미합니다.")]),s._v(" "),a("h3",{attrs:{id:"session에-객체-추가하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session에-객체-추가하기"}},[s._v("#")]),s._v(" "),a("code",[s._v("Session")]),s._v("에 객체 추가하기")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("engine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 반드시 사용 후 close 해야 합니다.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("squidward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Session.add() 매소드를 통해서 객체를 Session에 추가해줍니다.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("krabs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("객체가 "),a("code",[s._v("Session.add()")]),s._v("를 통해서 "),a("code",[s._v("Session")]),s._v("에 추가하게 되면, "),a("code",[s._v("pending")]),s._v(" 상태가 되었다고 부릅니다.\n"),a("code",[s._v("pending")]),s._v(" 상태는 아직 데이터베이스에 추가되지 않은 상태입니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("new "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# session.new를 통해서 pending 상태에 있는 객체들을 확인할 수 있습니다.")]),s._v("\nIdentitySet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'squidward'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Squidward Tentacles'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ehkrabs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Eugene H. Krabs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("ul",[a("li",[a("code",[s._v("IdentitySet")]),s._v("은 모든 경우에 객체 ID를 hash하는 Python "),a("code",[s._v("set")]),s._v("입니다.")]),s._v(" "),a("li",[s._v("즉, Python 내장 함수 중 "),a("code",[s._v("hash()")]),s._v("가 아닌, "),a("code",[s._v("id()")]),s._v(" 메소드를 사용하고 있습니다.")])]),s._v(" "),a("h3",{attrs:{id:"flushing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flushing"}},[s._v("#")]),s._v(" Flushing")]),s._v(" "),a("p",[a("code",[s._v("Session")]),s._v(" 객체는 "),a("a",{attrs:{href:"https://zetlos.tistory.com/1179902868",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("unit of work")]),s._v(" 패턴"),a("OutboundLink")],1),s._v("을 사용합니다. 이는 변경 사항을 누적하지만, 필요할 때까지는 실제로 데이터베이스와 통신을 하지 않음을 의미합니다.\n이런 동작 방식을 통해서 위에서 언급한 "),a("code",[s._v("pending")]),s._v(" 상태의 객체들이 더 효율적인 SQL DML로 사용됩니다.\n현재의 변경된 사항들을 실제로 Database에 SQL을 통해 내보내는 작업을 flush 이라고 합니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("flush"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v("\"\"\"\nINSERT INTO user_account (name, fullname) VALUES (?, ?)\n[...] ('squidward', 'Squidward Tentacles')\nINSERT INTO user_account (name, fullname) VALUES (?, ?)\n[...] ('ehkrabs', 'Eugene H. Krabs')\n\"\"\"")]),s._v("\n")])])]),a("p",[s._v("이제 트랜잭션은 "),a("code",[s._v("Session.commit()")]),s._v(", "),a("code",[s._v("Session.rollback()")]),s._v(", "),a("code",[s._v("Session.close()")]),s._v(" 중 하나가 호출될 때 까지 열린 상태로 유지됩니다.")]),s._v(" "),a("p",[a("code",[s._v("Session.flush()")]),s._v("를 직접 사용하여, 현재 "),a("code",[s._v("pending")]),s._v(" 상태에 있는 내용을 직접 밀어넣을 수 있지만, Session은 autoflush라는 동작을 특징으로 하므로 일반적으로는 필요하지 않습니다. "),a("code",[s._v("Session.commit()")]),s._v("이 호출 될 때 마다 변경 사항을 flush 합니다.")]),s._v(" "),a("h3",{attrs:{id:"자동-생성된-기본-키-속성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#자동-생성된-기본-키-속성"}},[s._v("#")]),s._v(" 자동 생성된 기본 키 속성")]),s._v(" "),a("p",[s._v("행이 삽입되게 되면, 우리가 생성한 Python 객체는 "),a("code",[s._v("persistent")]),s._v(" 라는 상태가 됩니다.\n"),a("code",[s._v("persistent")]),s._v(" 상태는 로드된 "),a("code",[s._v("Session")]),s._v(" 객체와 연결됩니다.")]),s._v(" "),a("p",[a("code",[s._v("INSERT")]),s._v(" 실행 시, ORM이 각각의 새 객체에 대한 기본 키 식별자를 검색하는 효과를 가져옵니다.\n이전에 소개한것과 동일한 "),a("code",[s._v("CursorResult.inserted_primary_key")]),s._v(" 접근자를 사용합니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" squidward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" krabs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n")])])]),a("blockquote",[a("p",[s._v("ORM이 flush 될 때, "),a("code",[s._v("executemany")]),s._v(" 대신, 두 개의 다른 INSERT 문을 사용하는 이유가 바로 이 "),a("code",[s._v("CursorResult.inserted_primary_key")]),s._v(" 때문입니다.")]),s._v(" "),a("ul",[a("li",[s._v("SQLite의 경우 한 번에 한 열을 "),a("code",[s._v("INSERT")]),s._v(" 해야 자동 증가 기능을 사용할 수 있습니다.(PostgreSQL의 IDENTITY나 SERIAL 기능등 다른 다양한 데이터베이스들의 경우들도 이처럼 동작합니다.)")]),s._v(" "),a("li",[a("code",[s._v("psycopg2")]),s._v("와 같이 한번에 많은 데이터에 대한 기본 키 정보를 제공 받을 수 있는 데이터베이스가 연결되어 있다면, ORM은 이를 최적화하여 많은 열을 한번에 "),a("code",[s._v("INSERT")]),s._v(" 하도록 합니다.")])])]),s._v(" "),a("h3",{attrs:{id:"identity-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identity-map"}},[s._v("#")]),s._v(" Identity Map")]),s._v(" "),a("p",[a("code",[s._v("Identity Map")]),s._v("("),a("code",[s._v("ID Map")]),s._v(")은 현재 메모리에 로드된 모든 객체를 기본 키 ID에 연결하는 메모리 내 저장소입니다.\n"),a("code",[s._v("Session.get()")]),s._v("을 통해서 객체 중 하나를 검색할 수 있습니다.\n이 메소드는 객체가 메모리에 있으면, "),a("code",[s._v("ID Map")]),s._v("에서, 그렇지 않으면 "),a("code",[s._v("SELECT")]),s._v("문을 통해서 객체를 검색합니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" some_squidward "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" some_squidward\nUser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'squidward'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Squidward Tentacles'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("중요한 점은, "),a("code",[s._v("ID Map")]),s._v("은 Python 객체 중에서도 고유한 객체를 유지하고 있다는 점입니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" some_squidward "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" squidward \n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n")])])]),a("p",[a("code",[s._v("ID map")]),s._v("은 동기화되지 않은 상태에서, 트랜잭션 내에서 복잡한 개체 집합을 조작할 수 있도록 하는 중요한 기능입니다.")]),s._v(" "),a("h3",{attrs:{id:"committing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#committing"}},[s._v("#")]),s._v(" Committing")]),s._v(" "),a("p",[s._v("현재까지의 변경사항을 트랜잭션에 "),a("code",[s._v("commit")]),s._v(" 합니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nCOMMIT\n")])])]),a("br"),s._v(" "),a("h2",{attrs:{id:"orm-객체-update하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orm-객체-update하기"}},[s._v("#")]),s._v(" ORM 객체 "),a("code",[s._v("UPDATE")]),s._v("하기")]),s._v(" "),a("p",[s._v("ORM을 통해 "),a("code",[s._v("UPDATE")]),s._v(" 하는 방법에는 2가지 방법이 있습니다.")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("Session")]),s._v("에서 사용하는 "),a("code",[s._v("unit of work")]),s._v(" 패턴 방식이 있습니다. 변경사항이 있는 기본 키 별로 "),a("code",[s._v("UPDATE")]),s._v(" 작업이 순서대로 내보내지게 됩니다.")]),s._v(" "),a("li",[s._v('"ORM 사용 업데이트"라고 하며 명시적으로 Session과 함께 '),a("code",[s._v("Update")]),s._v(" 구성을 사용할 수도 있습니다.")])]),s._v(" "),a("h3",{attrs:{id:"변경사항을-자동으로-업데이트하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#변경사항을-자동으로-업데이트하기"}},[s._v("#")]),s._v(" 변경사항을 자동으로 업데이트하기")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" sandy "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("select"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("filter_by"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sandy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scalar_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWHERE user_account.name = ?\n[...] (\'sandy\',)\n"""')]),s._v("\n")])])]),a("p",[s._v("이 'Sandy' 유저 객체는 데이터베이스에서 행, 더 구체적으로는 트랙잭션 측면에서 기본 키가 2인 행에 대한 "),a("code",[s._v("proxy")]),s._v(" 역할을 합니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" sandy\nUser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'sandy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Sandy Cheeks'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" sandy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fullname "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sandy Squirrel"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 객체의 속성을 변화시키면, Session은 이 변화를 기록합니다.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" sandy "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("dirty "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 이렇게 변한 객체는 dirty 라고 불리우며 session.dirty에서 확인 할 수 있습니다.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n")])])]),a("p",[s._v("Session이 "),a("code",[s._v("flush")]),s._v("를 실행하게 되면, 데이터베이스에서 "),a("code",[s._v("UPDATE")]),s._v("가 실행되어 데이터베이스에 실제로 값을 갱신합니다. "),a("code",[s._v("SELECT")]),s._v(" 문을 추가로 실행하게 되면, 자동으로 "),a("code",[s._v("flush")]),s._v("가 실행되어 sandy의 바뀐 이름 값을 "),a("code",[s._v("SELECT")]),s._v("를 통해서 바로 얻을 수 있습니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" sandy_fullname "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("     select"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fullname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scalar_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nUPDATE user_account SET fullname=? WHERE user_account.id = ?\n[...] (\'Sandy Squirrel\', 2)\nSELECT user_account.fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (2,)\n"""')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sandy_fullname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nSandy Squirrel\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# flush를 통해 sandy의 변화가 실제로 데이터베이스에 반영되어, dirty 속성을 잃게 됩니다.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" sandy "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("dirty \n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n")])])]),a("h3",{attrs:{id:"orm-사용-업데이트"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orm-사용-업데이트"}},[s._v("#")]),s._v(" ORM 사용 업데이트")]),s._v(" "),a("p",[s._v("ORM을 통해 "),a("code",[s._v("UPDATE")]),s._v(" 하는 마지막 방법으로 "),a("code",[s._v("ORM 사용 업데이트")]),s._v("를 명시적으로 사용하는 방법이 있습니다. 이를 사용하면  한 번에 많은 행에 영향을 줄 수 있는 일반 SQL "),a("code",[s._v("UPDATE")]),s._v(" 문을 사용할 수 있습니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("     update"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("     where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sandy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("     values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fullname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sandy Squirrel Extraordinaire"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nUPDATE user_account SET fullname=? WHERE user_account.name = ?\n[...] (\'Sandy Squirrel Extraordinaire\', \'sandy\')\n"""')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("sqlalchemy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("engine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("cursor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CursorResult "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),a("p",[s._v("현재 "),a("code",[s._v("Session")]),s._v("에서 주어진 조건과 일치하는 객체가 있다면, 이 객체에도 해당하는 "),a("code",[s._v("update")]),s._v("가 반영되게 됩니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" sandy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fullname\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Sandy Squirrel Extraordinaire'")]),s._v("\n")])])]),a("br"),s._v(" "),a("h2",{attrs:{id:"orm-객체를-삭제하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orm-객체를-삭제하기"}},[s._v("#")]),s._v(" ORM 객체를 삭제하기")]),s._v(" "),a("p",[a("code",[s._v("Session.delete()")]),s._v(" 메서드를 사용하여 개별 ORM 객체를 삭제 대상으로 표시할 수 있습니다. "),a("code",[s._v("delete")]),s._v("가 수행되면, 해당 "),a("code",[s._v("Session")]),s._v("에 존재하는 객체들은 "),a("code",[s._v("expired")]),s._v(" 상태가 되게 됩니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" patrick "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nSELECT user_account.id AS user_account_id, user_account.name AS user_account_name,\nuser_account.fullname AS user_account_fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (3,)\n"""')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("patrick"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# patrik을 삭제 할 것이라고 명시")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("select"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"patrick"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 이 시점에서 flush 실행")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nSELECT address.id AS address_id, address.email_address AS address_email_address,\naddress.user_id AS address_user_id\nFROM address\nWHERE ? = address.user_id\n[...] (3,)\nDELETE FROM user_account WHERE user_account.id = ?\n[...] (3,)\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWHERE user_account.name = ?\n[...] (\'patrick\',)\n"""')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" squidward "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" session "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Session에서 만료되면, 해당 객체는 session에서 삭제됩니다.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n")])])]),a("p",[s._v("위의 "),a("code",[s._v("UPDATE")]),s._v("에서 사용된 'Sandy'와 마찬가지로, 해당 작업들은 진행중인 트랜잭션에서만 이루어진 일이며 "),a("code",[s._v("commit")]),s._v(" 하지 않는 이상, 언제든 취소할 수 있습니다.")]),s._v(" "),a("h3",{attrs:{id:"orm-사용-삭제하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orm-사용-삭제하기"}},[s._v("#")]),s._v(" ORM 사용 삭제하기")]),s._v(" "),a("p",[a("code",[s._v("UPDATE")]),s._v("와 마찬가지로 "),a("code",[s._v("ORM 사용 삭제하기")]),s._v("도 있습니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 예시를 위한 작업일 뿐, 실제로 delete에서 필요한 작업은 아닙니다.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" squidward "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nSELECT user_account.id AS user_account_id, user_account.name AS user_account_name,\nuser_account.fullname AS user_account_fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (4,)\n"""')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"squidward"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nDELETE FROM user_account WHERE user_account.name = ?\n[...] (\'squidward\',)\n<sqlalchemy.engine.cursor.CursorResult object at 0x...>\n"""')]),s._v("\n")])])]),a("br"),s._v(" "),a("h2",{attrs:{id:"rolling-back"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rolling-back"}},[s._v("#")]),s._v(" Rolling Back")]),s._v(" "),a("p",[a("code",[s._v("Session")]),s._v("에는 현재의 작업들을 롤백하는 "),a("code",[s._v("Session.rollback()")]),s._v(" 메소드가 존재합니다. 이 메소드는 위에서 사용된 "),a("code",[s._v("sandy")]),s._v("와 같은 Python 객체에도 영향을 미칩니다.\n"),a("code",[s._v("Session.rollback()")]),s._v("을 호출하면 트랜잭션을 롤백할 뿐만 아니라 현재 이 "),a("code",[s._v("Session")]),s._v("과 연결된 모든 객체를 "),a("code",[s._v("expired")]),s._v(" 상태로 바꿉니다. 이러한 상태 변경은 다음에 객체에 접근 할 때 스스로 새로 고침을 하는 효과가 있고 이러한 프로세스를 "),a("code",[s._v("지연 로딩")]),s._v(" 이라고 합니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rollback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nROLLBACK\n")])])]),a("p",[a("code",[s._v("expired")]),s._v(" 상태의 객체인 "),a("code",[s._v("sandy")]),s._v(" 를 자세히 보면, 특별한 SQLAlchemy 관련 상태 객체를 제외하고 다른 정보가 남아 있지 않음을 볼 수 있습니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" sandy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__dict__\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_sa_instance_state'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("sqlalchemy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("orm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("InstanceState "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),s._v(" at 0x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" sandy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fullname "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# session이 만료되었으므로, 해당 객체 속성에 접근 시, 트랜잭션이 새로 일어납니다.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nSELECT user_account.id AS user_account_id, user_account.name AS user_account_name,\nuser_account.fullname AS user_account_fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (2,)\n"""')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Sandy Cheeks'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" sandy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__dict__  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#이제 데이터베이스 행이 sandy 객체에도 채워진 것을 볼 수 있습니다.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_sa_instance_state'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("sqlalchemy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("orm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("InstanceState "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),s._v(" at 0x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'sandy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fullname'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Sandy Cheeks'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("삭제된 객체에 대해서도, "),a("code",[s._v("Session")]),s._v("에 다시 복원되었으며 데이터베이스에도 다시 나타나는 걸 볼 수 있습니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" patrick "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" session\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("execute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("select"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'patrick'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scalar_one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" patrick\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nSELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWHERE user_account.name = ?\n[...] (\'patrick\',)\n"""')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n")])])]),a("br"),s._v(" "),a("h2",{attrs:{id:"session-종료하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session-종료하기"}},[s._v("#")]),s._v(" "),a("code",[s._v("Session")]),s._v(" 종료하기")]),s._v(" "),a("p",[s._v("우리는 컨텍스트 구문 외부에서 "),a("code",[s._v("Session")]),s._v("을 다뤘는데, 이런 경우 다음처럼 명시적으로 "),a("code",[s._v("Session")]),s._v("을 닫아주는 것이 좋습니다.")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("close"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nROLLBACK\n")])])]),a("p",[s._v("마찬가지로 컨텍스트 구문을 통해 생성한 "),a("code",[s._v("Session")]),s._v("을 컨텍스트 구문 내에서 닫으면 다음 작업들이 수행됩니다.")]),s._v(" "),a("ul",[a("li",[s._v("진행 중인 모든 트랜잭션을 취소(예: 롤백)하여 연결 풀에 대한 모든 연결 리소스를 해제합니다.\n"),a("ul",[a("li",[s._v("즉, "),a("code",[s._v("Session")]),s._v("을 사용하여 일부 읽기 전용 작업을 수행한 다음, 닫을 때 트랜잭션이 롤백되었는지 확인하기 위해 "),a("code",[s._v("Session.rollback()")]),s._v("을 명시적으로 호출할 필요가 없습니다. 연결 풀이 이를 처리합니다.")])])]),s._v(" "),a("li",[a("code",[s._v("Session")]),s._v("에서 모든 개체를 삭제합니다.\n"),a("ul",[a("li",[s._v("이것은 sandy, patrick 및 squidward와 같이 이 "),a("code",[s._v("Session")]),s._v("에 대해 로드한 모든 Python 개체가 이제 "),a("code",[s._v("detached")]),s._v(" 상태에 있음을 의미합니다. 예를 들어 "),a("code",[s._v("expired")]),s._v(" 상태에 있던 객체는 "),a("code",[s._v("Session.commit()")]),s._v(" 호출로 인해 현재 행의 상태를 포함하지 않고 새로 고칠 데이터베이스 트랜잭션과 더 이상 연관되지 않습니다.")]),s._v(" "),a("li",[a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" squidward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name\nTraceback "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("most recent call last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\nsqlalchemy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("orm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("DetachedInstanceError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("User at 0x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" bound to a Session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" attribute refresh operation cannot proceed\n")])])])]),s._v(" "),a("li",[a("code",[s._v("detached")]),s._v("된 객체는 "),a("code",[s._v("Session.add()")]),s._v(" 메서드를 사용하여 동일한 객체 또는 새 "),a("code",[s._v("Session")]),s._v("과 다시 연결될 수 있습니다. 그러면 특정 데이터베이스 행과의 관계가 다시 설정됩니다.")]),s._v(" "),a("li",[a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("squidward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# session에 다시 연결")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" squidward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 트랜잭션을 통해 정보를 다시 불러옵니다.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nSELECT user_account.id AS user_account_id, user_account.name AS user_account_name, user_account.fullname AS user_account_fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (4,)\n"""')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'squidward'")]),s._v("\n")])])])])])])]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("detached")]),s._v(" 상태의 개체는 되도록이면 사용을 지양해야 합니다. "),a("code",[s._v("Session")]),s._v("이 닫히면 이전에 연결된 모든 개체에 대한 참조도 정리합니다. 일반적으로 "),a("code",[s._v("detached")]),s._v("된 객체가 필요한 경우는  웹 어플리케이션에서 방금 커밋된 개체를 뷰에서 렌더링되기 전에 "),a("code",[s._v("Session")]),s._v("이 닫힌 경우가 있습니다. 이 경우 "),a("code",[s._v("Session.expire_on_commit")]),s._v(" 플래그를 False로 설정합니다.")])])])}),[],!1,null,null,null);t.default=e.exports}}]);