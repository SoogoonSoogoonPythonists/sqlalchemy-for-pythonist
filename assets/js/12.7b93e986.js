(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{408:function(t,e,a){"use strict";a.r(e);var s=a(56),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"setting-up-a-connection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-a-connection"}},[t._v("#")]),t._v(" Setting up a Connection")]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"connecting-to-a-database"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connecting-to-a-database"}},[t._v("#")]),t._v(" Connecting to a Database")]),t._v(" "),a("p",[t._v("Let's try connecting to SQLite, a relatively lightweight database."),a("br"),t._v("\nYou can do it as follows:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sqlalchemy "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" create_engine\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" engine "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" create_engine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sqlite+pysqlite:///:memory:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" echo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" future"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Use the "),a("code",[t._v("sqlalchemy.create_engine")]),t._v(" function to create an "),a("strong",[t._v("'engine'")]),t._v(" that establishes a connection to the database.")]),t._v(" "),a("li",[t._v("The first argument is a "),a("strong",[a("code",[t._v("string URL")])]),t._v(".\n"),a("ul",[a("li",[t._v("Typically, the "),a("code",[t._v("string URL")]),t._v(" is structured as "),a("code",[t._v("dialect+driver://username:password@host:port/database")]),t._v(".\n"),a("ul",[a("li",[t._v("If you don't specify a "),a("code",[t._v("driver")]),t._v(", SQLAlchemy's default settings will be used.")])])]),t._v(" "),a("li",[t._v("Here, "),a("code",[t._v("sqlite+pysqlite:///test.db")]),t._v(" is the "),a("code",[t._v("string URL")]),t._v(".\n"),a("ul",[a("li",[t._v("For "),a("code",[t._v("sqlite")]),t._v(", the format follows "),a("code",[t._v("sqlite://<nohostname>/<path>")]),t._v(".")])])])])]),t._v(" "),a("li",[t._v("From the string URL "),a("code",[t._v("sqlite:///test.db")]),t._v(", we can understand the following information:\n"),a("ul",[a("li",[a("strong",[t._v("Which database")]),t._v(" to use ("),a("code",[t._v("dialect")]),t._v(", in this case, "),a("code",[t._v("sqlite")]),t._v(")")]),t._v(" "),a("li",[a("strong",[t._v("Which database API")]),t._v(" (the driver interacting with the database) to use (in this case, "),a("code",[t._v("pysqlite")]),t._v(")")]),t._v(" "),a("li",[a("strong",[t._v("How to find")]),t._v(" the database (in this case, it uses the in-memory feature provided by "),a("code",[t._v("sqlite")]),t._v(")")])])]),t._v(" "),a("li",[t._v("Setting the "),a("code",[t._v("echo")]),t._v(" parameter to "),a("code",[t._v("True")]),t._v(" prints all executed SQL.")])]),t._v(" "),a("p",[t._v("Creating an engine doesn't yet attempt an actual connection. The real connection occurs only when a request to perform an operation on the database is received for the first time.")])])}),[],!1,null,null,null);e.default=n.exports}}]);